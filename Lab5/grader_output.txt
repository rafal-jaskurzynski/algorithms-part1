See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (2 warnings)
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 33 warnings)

Correctness:  28/36 tests passed
Memory:       16/16 tests passed
Timing:       26/42 tests passed

Aggregate score: 79.05%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
5.8K Jan  8 07:41 KdTree.java
1.5K Jan  8 07:41 KdTreeVisualizer.java
2.5K Jan  8 07:41 NearestNeighborVisualizer.java
1.7K Jan  8 07:41 PointSET.java
3.5K Jan  8 07:41 RangeSearchVisualizer.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

% javac KdTree.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
M D UP_UNUSED_PARAMETER UP: Static or private method KdTree._range(KdTree$Node, RectHV, ArrayList, boolean) has unused parameters  At KdTree.java:[lines 157-172]
M D DLS_DEAD_LOCAL_STORE DLS: Assigns a value to the local variable 'nd' but that value is never used.  At KdTree.java:[line 74]
Warnings generated: 2


================================================================


% pmd .
*-----------------------------------------------------------
KdTree.java:17: Instance (and static) variables should be declared at the top of the class, before any method declarations, constructors, or nested classes. [FieldDeclarationsShouldBeAtStartOfClass]
KdTree.java:18: Instance (and static) variables should be declared at the top of the class, before any method declarations, constructors, or nested classes. [FieldDeclarationsShouldBeAtStartOfClass]
KdTree.java:19: Instance (and static) variables should be declared at the top of the class, before any method declarations, constructors, or nested classes. [FieldDeclarationsShouldBeAtStartOfClass]
KdTree.java:20: Instance (and static) variables should be declared at the top of the class, before any method declarations, constructors, or nested classes. [FieldDeclarationsShouldBeAtStartOfClass]
KdTree.java:23: Instance (and static) variables should be declared at the top of the class, before any method declarations, constructors, or nested classes. [FieldDeclarationsShouldBeAtStartOfClass]
KdTree.java:24: Instance (and static) variables should be declared at the top of the class, before any method declarations, constructors, or nested classes. [FieldDeclarationsShouldBeAtStartOfClass]
KdTree.java:41: Avoid unused private methods, such as '_count(Node)'. [UnusedPrivateMethod]
KdTree.java:155: Avoid unused parameter variables, such as 'horizontal'. [UnusedFormalParameter]
PointSET.java:9: The private instance (or static) variable '_tree' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PointSET.java:18: Use the 'isEmpty()' method instead of comparing 'size()' to '0'. [UseCollectionIsEmpty]
PointSET.java:83: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
PMD ends with 11 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] KdTree.java:6:3: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:10:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] KdTree.java:17:9: Declare instance variables after static variables but before constructors and methods. [DeclarationOrder]
[WARN] KdTree.java:17:17: The instance variable '_value' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] KdTree.java:18:9: Declare instance variables after static variables but before constructors and methods. [DeclarationOrder]
[WARN] KdTree.java:18:14: The instance variable '_left' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] KdTree.java:19:9: Declare instance variables after static variables but before constructors and methods. [DeclarationOrder]
[WARN] KdTree.java:19:14: The instance variable '_right' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] KdTree.java:20:9: Declare instance variables after static variables but before constructors and methods. [DeclarationOrder]
[WARN] KdTree.java:20:17: The instance variable '_horizontal' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] KdTree.java:23:18: The instance variable '_root' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] KdTree.java:24:17: The instance variable '_size' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] KdTree.java:41:17: The method '_count' must start with a lowercase letter and use camelCase. [MethodName]
[WARN] KdTree.java:69:18: The method '_insert' must start with a lowercase letter and use camelCase. [MethodName]
[WARN] KdTree.java:70:17: The local variable 'insert_left' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] KdTree.java:74:41: Inner assignments should be avoided. [InnerAssignment]
[WARN] KdTree.java:74:80: Inner assignments should be avoided. [InnerAssignment]
[WARN] KdTree.java:89:21: The method '_contains' must start with a lowercase letter and use camelCase. [MethodName]
[WARN] KdTree.java:98:17: The local variable 'comp_key' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] KdTree.java:108:18: The method '_draw' must start with a lowercase letter and use camelCase. [MethodName]
[WARN] KdTree.java:155:18: The method '_range' must start with a lowercase letter and use camelCase. [MethodName]
[WARN] KdTree.java:198:17: The local variable 'best_left' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] KdTree.java:203:17: The local variable 'best_right' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] KdTree.java:219:24: The local variable 'new_dist' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] KdTree.java:233:3: The comment is empty. [EmptyComment]
[WARN] PointSET.java:9:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] PointSET.java:9:30: The instance variable '_tree' must start with a lowercase letter and use camelCase. [MemberName]
Checkstyle ends with 0 errors and 27 warnings.

% custom checkstyle checks for PointSET.java
*-----------------------------------------------------------
[WARN] PointSET.java:76:75: Do not call 'distanceTo()' in this program; instead use 'distanceSquaredTo()'. [Performance]
[WARN] PointSET.java:76:96: Do not call 'distanceTo()' in this program; instead use 'distanceSquaredTo()'. [Performance]
Checkstyle ends with 0 errors and 2 warnings.

% custom checkstyle checks for KdTree.java
*-----------------------------------------------------------
[WARN] KdTree.java:115:38: The numeric literal '0.005' appears to be unnecessary. [NumericLiteral]
[WARN] KdTree.java:134:38: The numeric literal '0.02' appears to be unnecessary. [NumericLiteral]
[WARN] KdTree.java:217:61: Do not call 'distanceTo()' in this program; instead use 'distanceSquaredTo()'. [Performance]
[WARN] KdTree.java:219:72: Do not call 'distanceTo()' in this program; instead use 'distanceSquaredTo()'. [Performance]
Checkstyle ends with 0 errors and 4 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: inserting n random points and check size() after each insertion
        (size may be less than n because of duplicates)
  * 100000 random points in a 65536-by-65536 grid
  * 100000 random points in a 8192-by-8192 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 128-by-128 grid
  * 100000 random points in a 16-by-16 grid
==&gt; passed

Test 2: check isEmpty() for n = 0, 1, and 2 points
  * 0 points
  * 1 point
  * 2 points
==&gt; passed

Test 3: insert n random points and check contains() for n random query points
  * 100000 random points in a 65536-by-65536 grid
  * 100000 random points in a 8192-by-8192 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 128-by-128 grid
  * 100000 random points in a 16-by-16 grid
==&gt; passed

Test 4: insert n random points and check nearest() for n random query points
  * 1000 random points in a 65536-by-65536 grid
  * 1000 random points in a 8192-by-8192 grid
  * 1000 random points in a 1024-by-1024 grid
  * 1000 random points in a 128-by-128 grid
  * 1000 random points in a 16-by-16 grid
==&gt; passed

Test 5: insert n random points and check range() for n random query rectangles
  * 1000 random rectangles and points in a 65536-by-65536 grid
  * 1000 random rectangles and points in a 8192-by-8192 grid
  * 1000 random rectangles and points in a 1024-by-1024 grid
  * 1000 random rectangles and points in a 128-by-128 grid
  * 1000 random rectangles and points in a 16-by-16 grid
==&gt; passed

Test 6: check intermixed sequence of calls to isEmpty(), size(),
        insert(), contains(), range(), and nearest() with probabilities
        p1, p2, p3, p4, p5, and p6, respectively
  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 128-by-128 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 16-by-16 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
==&gt; passed

Test 7: check intermixed sequence of calls to isEmpty(), size(),
        insert(), contains(), range(), and nearest() with probabilities
        p1, p2, p3=0, p4, p5, and p6, respectively
        (data structure with 0 points)
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.5, 0.5, 0.0, 0.0, 0.0, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.6, 0.0, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.0, 0.6, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.0, 0.0, 0.6
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
==&gt; passed

Test 8: check whether two PointSET objects can be created at the same time
==&gt; passed


Total: 8/8 tests passed!


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
Running 28 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==&gt; passed

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 50 random non-degenerate points in a 128-by-128 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 50000 random non-degenerate points in a 65536-by-65536 grid
==&gt; passed

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==&gt; passed

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid
    - failed after inserting point 4 of 5
    - student   size()    = 4
    - reference size()    = 3
    - student   isEmpty() = false
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  1.0 1.0
      B  1.0 0.0
      C  0.0 1.0
      D  1.0 0.0

  * 10 random general points in a 4-by-4 grid
  * 50 random general points in a 8-by-8 grid
    - failed after inserting point 25 of 50
    - student   size()    = 25
    - reference size()    = 24
    - student   isEmpty() = false
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.125 0.5
      B  0.125 0.25
      C  0.875 1.0
      D  1.0 0.625
      E  0.5 0.125
      F  0.875 0.875
      G  0.0 1.0
      H  0.125 1.0
      I  0.125 0.375
      J  0.0 0.0
      K  0.625 0.25
      L  0.5 0.25
      M  0.375 0.75
      N  0.875 0.0
      O  0.0 0.75
      P  0.0 0.625
      Q  0.625 0.0
      R  1.0 0.875
      S  0.25 1.0
      T  0.625 1.0
      U  0.5 0.875
      V  0.75 1.0
      W  0.75 0.75
      X  0.875 0.5
      Y  0.75 1.0

  * 100000 random general points in a 16-by-16 grid
    - failed after inserting point 30 of 100000
    - student   size()    = 30
    - reference size()    = 29
    - student   isEmpty() = false
    - reference isEmpty() = false

  * 100000 random general points in a 128-by-128 grid
    - failed after inserting point 114 of 100000
    - student   size()    = 114
    - reference size()    = 113
    - student   isEmpty() = false
    - reference isEmpty() = false

  * 100000 random general points in a 1024-by-1024 grid
    - failed after inserting point 142 of 100000
    - student   size()    = 142
    - reference size()    = 141
    - student   isEmpty() = false
    - reference isEmpty() = false

==&gt; FAILED

Test 2a: insert points from file; check contains() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==&gt; passed

Test 2b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==&gt; passed

Test 2c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==&gt; passed

Test 2d: insert general points; check contains() with random query points
  * 10000 random general points in a 1-by-1 grid
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 1024-by-1024 grid
==&gt; passed

Test 3a: insert points from file; check range() with random query rectangles
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==&gt; passed

Test 3b: insert non-degenerate points; check range() with random query rectangles
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid
  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid
  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid
  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid
==&gt; passed

Test 3c: insert distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
  * 10 random distinct points and random rectangles in a 4-by-4 grid
  * 20 random distinct points and random rectangles in a 8-by-8 grid
  * 100 random distinct points and random rectangles in a 16-by-16 grid
  * 1000 random distinct points and random rectangles in a 64-by-64 grid
  * 10000 random distinct points and random rectangles in a 128-by-128 grid
==&gt; passed

Test 3d: insert general points; check range() with random query rectangles
  * 5000 random general points and random rectangles in a 2-by-2 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0, 0.5] x [1.0, 1.0]
    - student   range():  F R R R R R R R R R R R R R R R R R R R R R R R R R ...
    - reference range():  F R 

  * 5000 random general points and random rectangles in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.125, 0.6875] x [0.5, 1.0]
    - student   range():  H W W Y S S S S S S S S S S S S S S S S S S S S S S ...
    - reference range():  H W W Y S M X R G I U C J X N N P F S R J X C Q K A ...

  * 5000 random general points and random rectangles in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.2109375, 0.921875] x [0.34375, 0.78125]
    - student   range():  A I L J V N J N U V T D B G Q Q S Y E I Q E N G N W ...
    - reference range():  A I L J V N U V T D B G Q S Y E I Q E N G N W O L S ...

  * 5000 random general points and random rectangles in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0546875, 0.2802734375] x [0.263671875, 0.4287109375]
    - student   range():  T M Q E S B W B V S V K D H P A J W O X K X T I R F ...
    - reference range():  T M Q E S B W B V S V K D H P A J W O X K X T I R F ...

==&gt; FAILED

Test 3e: insert random points; check range() with tiny rectangles
         enclosing each point
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid
    - failed on trial 0 of 5
    - query rectangle = [0.0, 0.125] x [0.375, 0.625]
    - sequence of points inserted: 
      A  0.0 0.5
      B  0.5 0.0
      C  1.0 0.0
      D  0.0 0.5
      E  1.0 0.0
    - student   range():  D D 
    - reference range():  D 

  * 10 tiny rectangles and 10 general points in a 4-by-4 grid
  * 20 tiny rectangles and 20 general points in a 8-by-8 grid
  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid
  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid
  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid
==&gt; FAILED

Test 4a: insert points from file; check range() with random query rectangles
         and check traversal of kd-tree
  * input5.txt
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to range()
    - do not check whether the point is inside the query rectangle unless
      the rectangle corresponding to the node intersects the query rectangle

  * input10.txt
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.12, 0.24] x [0.58, 0.98]
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student sequence of kd-tree nodes involved in calls to contains():
      A C D E F B G J H I 
    - reference sequence of kd-tree nodes involved in calls to contains():
      A C F 

==&gt; FAILED

Test 4b: insert non-degenerate points; check range() with random query rectangles
         and check traversal of kd-tree
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to range()
    - do not check whether the point is inside the query rectangle unless
      the rectangle corresponding to the node intersects the query rectangle

  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid
    - failed on trial 5 of 1000
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.25, 1.0] x [0.0, 0.25]
    - sequence of points inserted: 
      A  0.625 0.125
      B  0.375 0.375
      C  0.5 0.75
      D  0.75 0.875
      E  0.875 0.625
      F  0.0 1.0
    - student sequence of kd-tree nodes involved in calls to contains():
      A B C F D E 
    - reference sequence of kd-tree nodes involved in calls to contains():
      A B D E 

  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid
    - failed on trial 2 of 1000
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.5625, 0.875] x [0.0625, 0.75]
    - sequence of points inserted: 
      A  0.0 0.375
      B  0.9375 0.125
      C  0.6875 0.5625
      D  0.25 1.0
      E  0.5 0.3125
      F  0.75 0.1875
      G  0.125 0.8125
      H  0.4375 0.5
      I  0.375 0.4375
      J  1.0 0.9375
    - student sequence of kd-tree nodes involved in calls to contains():
      A B C D E G H I F J 
    - reference sequence of kd-tree nodes involved in calls to contains():
      A B C D E F J 

  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.0, 0.40625] x [0.84375, 0.96875]
    - sequence of points inserted: 
      A  0.03125 0.71875
      B  0.4375 0.34375
      C  0.21875 0.03125
      D  0.90625 0.40625
      E  0.53125 0.375
      F  0.8125 0.6875
      G  0.46875 0.46875
      H  0.15625 0.59375
      I  0.71875 0.0
      J  0.5 0.75
      K  0.34375 0.9375
      L  0.625 0.5
      M  0.09375 0.65625
      N  0.59375 0.28125
      O  1.0 0.25
      P  0.78125 0.09375
      Q  0.3125 0.90625
      R  0.875 0.53125
      S  0.6875 0.21875
      T  0.5625 0.8125
    - student sequence of kd-tree nodes involved in calls to contains():
      A B C I N O P S D E F G H M J L K Q T R 
    - reference sequence of kd-tree nodes involved in calls to contains():
      A B D E F G H M J K Q T 

  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.296875, 0.421875] x [0.09375, 0.546875]
    - number of entries in student   solution: 30
    - number of entries in reference solution: 13
    - 17 extra entries in student solution, including: '(0.5, 0.96875)'

==&gt; FAILED

Test 5a: insert points from file; check nearest() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==&gt; passed

Test 5b: insert non-degenerate points; check nearest() with random query points
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 30 random non-degenerate points in a 64-by-64 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==&gt; passed

Test 5c: insert distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid
  * 15 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 100 random distinct points in a 32-by-32 grid
  * 10000 random distinct points in a 65536-by-65536 grid
==&gt; passed

Test 5d: insert general points; check nearest() with random query points
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 1024-by-1024 grid
==&gt; passed

Test 6a: insert points from file; check nearest() with random query points
         and check traversal of kd-tree
  * input5.txt
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - query point                   = (0.97, 0.72)
    - student   nearest()           = (0.9, 0.6)
    - reference nearest()           = (0.9, 0.6)
    - student   distanceSquaredTo() = 0.0193
    - reference distanceSquaredTo() = 0.0193
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      C D B E A 
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A E 

  * input10.txt
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - query point                   = (0.71, 0.77)
    - student   nearest()           = (0.785, 0.725)
    - reference nearest()           = (0.785, 0.725)
    - student   distanceSquaredTo() = 0.00765
    - reference distanceSquaredTo() = 0.00765
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      E D F C J G I H B A 
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A B H I 

==&gt; FAILED

Test 6b: insert non-degenerate points; check nearest() with random query points
         and check traversal of kd-tree
  * 5 random non-degenerate points in a 8-by-8 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted: 
      A  0.5 0.375
      B  0.0 1.0
      C  0.375 0.75
      D  1.0 0.875
      E  0.75 0.0
    - query point                   = (0.875, 0.5)
    - student   nearest()           = (0.5, 0.375)
    - reference nearest()           = (0.5, 0.375)
    - student   distanceSquaredTo() = 0.15625
    - reference distanceSquaredTo() = 0.15625
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      C B E D A 
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A D E B C 

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted: 
      A  0.1875 0.1875
      B  0.375 0.0625
      C  0.9375 0.75
      D  0.75 0.8125
      E  0.6875 0.5
      F  0.625 0.875
      G  0.125 0.625
      H  0.4375 0.375
      I  0.875 0.5625
      J  0.0 0.0
    - query point                   = (0.5625, 0.125)
    - student   nearest()           = (0.375, 0.0625)
    - reference nearest()           = (0.375, 0.0625)
    - student   distanceSquaredTo() = 0.0390625
    - reference distanceSquaredTo() = 0.0390625
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      J G H I E F D C B A 
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A B C D E H I 

  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted: 
      A  0.84375 0.6875
      B  0.625 0.25
      C  0.21875 0.5
      D  0.78125 0.84375
      E  0.5 0.1875
      F  0.375 0.0
      G  0.34375 0.28125
      H  0.3125 0.78125
      I  0.8125 0.125
      J  0.59375 0.09375
      K  0.0 0.8125
      L  0.0625 0.0625
      M  0.53125 0.40625
      N  0.5625 0.03125
      O  0.96875 0.4375
      P  0.28125 0.875
      Q  0.03125 0.3125
      R  0.1875 0.9375
      S  0.09375 0.46875
      T  0.6875 0.15625
    - query point                   = (0.9375, 0.90625)
    - student   nearest()           = (0.78125, 0.84375)
    - reference nearest()           = (0.78125, 0.84375)
    - student   distanceSquaredTo() = 0.0283203125
    - reference distanceSquaredTo() = 0.0283203125
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      L F N J T I E S Q R K H M G P D C B O A 
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A O B C D P G M 

  * 30 random non-degenerate points in a 64-by-64 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 30
    - number of reference entries = 7
    - entry 0 of the two sequences are not equal
    - student   entry 0 = (0.046875, 0.265625)
    - reference entry 0 = (0.34375, 0.015625)

  * 50 random non-degenerate points in a 128-by-128 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 50
    - number of reference entries = 10
    - entry 0 of the two sequences are not equal
    - student   entry 0 = (0.0625, 0.15625)
    - reference entry 0 = (0.6171875, 0.2421875)

  * 1000 random non-degenerate points in a 2048-by-2048 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 1000
    - number of reference entries = 18
    - entry 0 of the two sequences are not equal
    - student   entry 0 = (4.8828125E-4, 0.3994140625)
    - reference entry 0 = (0.00634765625, 0.8369140625)

==&gt; FAILED

Test 7: insert n random points; check that repeated calls to get(),
         range(), and nearest() with the same argument yield same results
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 100 random general points in a 128-by-128 grid
  * 1000 random general points in a 65536-by-65536 grid
==&gt; passed

Test 8a: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
==&gt; passed

Test 8b: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 10-by-10 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 100-by-100 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 1000-by-1000 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
==&gt; passed

Test 8c: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with general points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 19 of 20000
    - student   size() = 5
    - reference size() = 4
    - sequence of operations was:
           st.insert(0.0, 0.0)
           st.contains((0.0, 0.0))  ==&gt;  true
           st.range([0.0, 1.0] x [0.0, 0.0])  ==&gt;  C 
           st.range([0.0, 1.0] x [1.0, 1.0])  ==&gt;  empty
           st.nearest((1.0, 1.0))   ==&gt;  (0.0, 0.0)
           st.range([0.0, 0.0] x [0.0, 1.0])  ==&gt;  C 
           st.size()  ==&gt;  1
           st.contains((1.0, 0.0))  ==&gt;  false
           st.nearest((1.0, 1.0))   ==&gt;  (0.0, 0.0)
           st.insert(0.0, 1.0)
           st.insert(1.0, 1.0)
           st.contains((1.0, 0.0))  ==&gt;  false
           st.nearest((1.0, 0.0))   ==&gt;  (0.0, 0.0)
           st.nearest((0.0, 1.0))   ==&gt;  (0.0, 1.0)
           st.insert(0.0, 1.0)
           st.insert(1.0, 0.0)
           st.contains((1.0, 1.0))  ==&gt;  true
           st.range([0.0, 1.0] x [0.0, 0.0])  ==&gt;  C O 
           st.size()  ==&gt;  5

  * 20000 calls with general points in a 10-by-10 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 65 of 20000
    - student   size() = 17
    - reference size() = 16

  * 20000 calls with general points in a 100-by-100 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 169 of 20000
    - student   size() = 57
    - reference size() = 56

  * 20000 calls with general points in a 1000-by-1000 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2404 of 20000
    - student   size() = 752
    - reference size() = 751

  * 20000 calls with general points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 17469 of 20000
    - student   size() = 5327
    - reference size() = 5326

  * 20000 calls with general points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
==&gt; FAILED

Test 9: check intermixed sequence of calls to insert(), isEmpty(),
        size(), contains(), range(), and nearest() with probabilities
        (p1=0, p2, p3, p4, p5, p6), respectively
        (data structure with 0 points)
  * 1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.5, 0.5, 0.0, 0.0, 0.0)
  * 1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.2, 0.2, 0.6, 0.0, 0.0)
  * 1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.2, 0.2, 0.0, 0.6, 0.0)
  * 1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.2, 0.2, 0.0, 0.0, 0.6)
  * 1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.2, 0.2, 0.2, 0.2, 0.2)
==&gt; passed

Test 10: check that two KdTree objects can be created at the same time
==&gt; passed

Test 11: check that the specified exception is thrown with null arguments
  * argument to insert() is null
  * argument to contains() is null
  * argument to range() is null
  * argument to nearest() is null
==&gt; passed


Total: 20/28 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes
================================================================



Analyzing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes
================================================================



Analyzing memory of PointSET
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a PointSET with n points (including Point2D and RectHV objects).
Maximum allowed memory is 96n + 200 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=&gt; passed        1          240                264
=&gt; passed        2          336                360
=&gt; passed        5          624                648
=&gt; passed       10         1104               1128
=&gt; passed       25         2544               2568
=&gt; passed      100         9744               9768
=&gt; passed      400        38544              38568
=&gt; passed      800        76944              76968
==&gt; 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 96.00 n + 144.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 96.00 n + 168.00  (R^2 = 1.000)
================================================================



Analyzing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with n points (including Point2D and RectHV objects).
Maximum allowed memory is 312n + 192 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=&gt; passed        1          120                160
=&gt; passed        2          208                288
=&gt; passed        5          472                672
=&gt; passed       10          912               1312
=&gt; passed       25         2232               3232
=&gt; passed      100         8832              12832
=&gt; passed      400        35232              51232
=&gt; passed      800        70432             102432
==&gt; 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 88.00 n + 32.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 128.00 n + 32.00  (R^2 = 1.000)
================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 14 total tests.


Inserting n points into a PointSET

               n      ops per second
----------------------------------------
=&gt; passed   160000    1474640         
=&gt; passed   320000    1485800         
=&gt; passed   640000    1158387         
=&gt; passed  1280000     953696         
==&gt; 4/4 tests passed

Performing contains() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=&gt; passed   160000     363670         
=&gt; passed   320000     348423         
=&gt; passed   640000     294905         
=&gt; passed  1280000     332442         
==&gt; 4/4 tests passed

Performing range() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=&gt; passed    10000       3694         
=&gt; passed    20000       1760         
=&gt; passed    40000        731         
==&gt; 3/3 tests passed

Performing nearest() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=&gt; passed    10000       4317         
=&gt; passed    20000       2049         
=&gt; passed    40000        814         
==&gt; 3/3 tests passed

Total: 14/14 tests passed!


================================================================



Timing KdTree
*-----------------------------------------------------------
Running 28 total tests.


Test 1a-d: Insert n points into a 2d tree. The table gives the average number of calls
           to methods in RectHV and Point per call to insert().

                                                                                                Point2D
               n      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=&gt; passed   160000    1458868               0.0              22.1              21.1               0.0         
=&gt; passed   320000    1482838               0.0              22.5              21.5               0.0         
=&gt; passed   640000    1088049               0.0              24.0              23.0               0.0         
=&gt; passed  1280000     739382               0.0              26.1              25.1               0.0         
==&gt; 4/4 tests passed


Test 2a-h: Perform contains() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to contains().

                                                                               Point2D
               n      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=&gt; passed    10000     269332              18.5              17.5              18.0         
=&gt; passed    20000     441267              19.7              18.7              19.2         
=&gt; passed    40000     408377              21.8              20.8              21.3         
=&gt; passed    80000     398481              22.0              21.0              21.5         
=&gt; passed   160000     374473              23.2              22.2              22.7         
=&gt; passed   320000     325104              25.0              24.0              24.5         
=&gt; passed   640000     270519              25.7              24.7              25.2         
=&gt; passed  1280000     318036              27.2              26.2              26.7         
==&gt; 8/8 tests passed


Test 3a-h: Perform range() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to range().

               n      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=&gt; FAILED    10000       4671   (0.1x)      0.0           10000.0  (33.3x)  15023.2  (75.1x)    223.8   (2.2x)
=&gt; FAILED    20000       2188   (0.0x)      0.0           20000.0  (66.7x)  30121.4 (150.6x)    314.6   (3.1x)
=&gt; FAILED    40000        904   (0.0x)      0.0           40000.0 (133.3x)  59830.4 (299.2x)    449.6   (4.5x)
=&gt; FAILED    80000        357   (0.0x)      0.0           80000.0 (266.7x) 119919.5 (599.6x)    634.3   (6.3x)
=&gt; FAILED   160000        159   (0.0x)      0.0          160000.0 (533.3x) 240909.0 (1e+03x)    908.6   (9.1x)
=&gt; FAILED   320000         37   (0.0x)      0.0          320000.0 (1e+03x) 480673.7 (2e+03x)   1292.4  (12.9x)
=&gt; FAILED   640000         14   (0.0x)      0.0          640000.0 (2e+03x) 961257.0 (5e+03x)   1827.8  (18.3x)
=&gt; FAILED  1280000         15   (0.0x)      0.0          1280000.0 (4e+03x) 1884698.7 (9e+03x)   2482.8  (24.8x)
==&gt; 0/8 tests passed


Test 4a-h: Perform nearest() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               n      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=&gt; FAILED    10000     1305   (0.0x)          0.0                    0.0                     0.0   (0.0x)      0.0   (0.0x)
=&gt; FAILED    20000      763   (0.0x)          0.0                    0.0                     0.0   (0.0x)      0.0   (0.0x)
=&gt; FAILED    40000      364   (0.0x)          0.0                    0.0                     0.0   (0.0x)      0.0   (0.0x)
=&gt; FAILED    80000      157   (0.0x)          0.0                    0.0                     0.0   (0.0x)      0.0   (0.0x)
=&gt; FAILED   160000       69   (0.0x)          0.0                    0.0                     0.0   (0.0x)      0.0   (0.0x)
=&gt; FAILED   320000       32   (0.0x)          0.0                    0.0                     0.0   (0.0x)      0.0   (0.0x)
=&gt; FAILED   640000       15   (0.0x)          0.0                    0.0                     0.0   (0.0x)      0.0   (0.0x)
=&gt; FAILED  1280000        8   (0.0x)          0.0                    0.0                     0.0   (0.0x)      0.0   (0.0x)
==&gt; 0/8 tests passed



Total: 12/28 tests passed!


================================================================





