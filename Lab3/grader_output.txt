See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  FAILED (0 errors, 2 warnings)
API:          PASSED

Findbugs:     FAILED (2 warnings)
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 30 warnings)

Correctness:  36/41 tests passed
Memory:       1/1 tests passed
Timing:       41/41 tests passed

Aggregate score: 87.68%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
2.7K Jan 10 08:00 BruteCollinearPoints.java
3.0K Jan 10 08:00 FastCollinearPoints.java
1.9K Jan 10 08:00 LineSegment.java
5.4K Jan 10 08:00 Point.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Point.java
*-----------------------------------------------------------

% javac BruteCollinearPoints.java
*-----------------------------------------------------------
BruteCollinearPoints.java:78: warning: [cast] redundant cast to LineSegment[]
		return (LineSegment[]) _seg.toArray(new LineSegment[0]);
		       ^
1 warning

% javac FastCollinearPoints.java
*-----------------------------------------------------------
FastCollinearPoints.java:90: warning: [cast] redundant cast to LineSegment[]
		return (LineSegment[]) _seg.toArray(new LineSegment[0]);
		       ^
1 warning


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At Point.java:[line 135]
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At BruteCollinearPoints.java:[line 58]
Warnings generated: 2


================================================================


% pmd .
*-----------------------------------------------------------
BruteCollinearPoints.java:11: The private instance (or static) variable '_seg' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
FastCollinearPoints.java:10: The private instance (or static) variable '_seg' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Point.java:123: The private instance (or static) variable '_p' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PMD ends with 3 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] BruteCollinearPoints.java:9:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] BruteCollinearPoints.java:11:36: The instance variable '_seg' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] BruteCollinearPoints.java:49:30: Do not use the letter 'l' as a local variable name. It is hard to distinguish from the number '1'. [LocalVariableName]
[WARN] FastCollinearPoints.java:10:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] FastCollinearPoints.java:10:36: The instance variable '_seg' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] FastCollinearPoints.java:36:15: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] FastCollinearPoints.java:50:23: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] FastCollinearPoints.java:60:15: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] FastCollinearPoints.java:63:15: The comment is empty. [EmptyComment]
[WARN] FastCollinearPoints.java:67:15: The comment is empty. [EmptyComment]
[WARN] FastCollinearPoints.java:68:15: The comment is empty. [EmptyComment]
[WARN] FastCollinearPoints.java:69:15: The comment is empty. [EmptyComment]
[WARN] FastCollinearPoints.java:71:15: The comment is empty. [EmptyComment]
[WARN] Point.java:17:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] Point.java:72:16: The local variable 'diff_y' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] Point.java:73:16: The local variable 'diff_x' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] Point.java:79:13: '(' is followed by whitespace. [ParenPad]
[WARN] Point.java:79:25: ')' is preceded with whitespace. [ParenPad]
[WARN] Point.java:123:23: The instance variable '_p' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Point.java:135:17: '(' is followed by whitespace. [ParenPad]
[WARN] Point.java:135:50: ')' is preceded with whitespace. [ParenPad]
[WARN] Point.java:159:9: Avoid nested blocks: the curly braces serve no purpose. [AvoidNestedBlocks]
[WARN] Point.java:171:9: Avoid nested blocks: the curly braces serve no purpose. [AvoidNestedBlocks]
[WARN] Point.java:180:9: Avoid nested blocks: the curly braces serve no purpose. [AvoidNestedBlocks]
[WARN] Point.java:192:9: Avoid nested blocks: the curly braces serve no purpose. [AvoidNestedBlocks]
[WARN] Point.java:204:9: Avoid nested blocks: the curly braces serve no purpose. [AvoidNestedBlocks]
[WARN] Point.java:216:9: Avoid nested blocks: the curly braces serve no purpose. [AvoidNestedBlocks]
[WARN] Point.java:227:9: Avoid nested blocks: the curly braces serve no purpose. [AvoidNestedBlocks]
Checkstyle ends with 0 errors and 28 warnings.

% custom checkstyle checks for Point.java
*-----------------------------------------------------------

% custom checkstyle checks for BruteCollinearPoints.java
*-----------------------------------------------------------

% custom checkstyle checks for FastCollinearPoints.java
*-----------------------------------------------------------
[WARN] FastCollinearPoints.java:8:1: Defining a nested class in this program suggests poor design. [Design]
[WARN] FastCollinearPoints.java:78:39: Using interface inheritance suggests poor design in this program. [Design]
Checkstyle ends with 0 errors and 2 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  * positive infinite slope, where p and q have coordinates in [0, 500)
  * positive infinite slope, where p and q have coordinates in [0, 32768)
  * negative infinite slope, where p and q have coordinates in [0, 500)
  * negative infinite slope, where p and q have coordinates in [0, 32768)
  * positive zero     slope, where p and q have coordinates in [0, 500)
  * positive zero     slope, where p and q have coordinates in [0, 32768)
  * symmetric for random points p and q with coordinates in [0, 500)
  * symmetric for random points p and q with coordinates in [0, 32768)
  * transitive for random points p, q, and r with coordinates in [0, 500)
  * transitive for random points p, q, and r with coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 500)
  * slopeTo(), where p and q have coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 10)
  * throw a java.lang.NullPointerException if argument is null
==&gt; passed

Test 2: p.compareTo(q)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p and q have coordinates in [0, 500)
  * antisymmetric, where p and q have coordinates in [0, 32768)
  * transitive, where p, q, and r have coordinates in [0, 500)
  * transitive, where p, q, and r have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 500)
  * sign of compareTo(), where p and q have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 10)
  * throw java.lang.NullPointerException exception if argument is null
==&gt; passed

Test 3: p.slopeOrder().compare(q, r)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p, q, and r have coordinates in [0, 500)
  * antisymmetric, where p, q, and r have coordinates in [0, 32768)
  * transitive, where p, q, r, and s have coordinates in [0, 500)
  * transitive, where p, q, r, and s have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 500)
  * sign of compare(), where p, q, and r have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 10)
  * throw java.lang.NullPointerException if either argument is null
==&gt; passed


Total: 3/3 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)
********************************************************************************

Testing correctness of BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==&gt; passed

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
==&gt; passed

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==&gt; passed

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt
==&gt; passed

Test 3b: random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments
==&gt; passed

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
==&gt; passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==&gt; passed

Test 5: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==&gt; passed

Test 6: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==&gt; passed

Test 7: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==&gt; passed

Test 8: random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==&gt; passed

Test 9: random line segments
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==&gt; passed

Test 10: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==&gt; passed

Test 11: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==&gt; passed

Test 12: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==&gt; passed

Test 13: throws an exception if either the constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==&gt; passed

Test 14: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==&gt; passed


Total: 17/17 tests passed!


================================================================
Testing correctness of FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = input299.txt
==&gt; passed

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
  * filename = horizontal50.txt
  * filename = horizontal75.txt
  * filename = horizontal100.txt
==&gt; passed

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==&gt; passed

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt
  * filename = vertical50.txt
  * filename = vertical75.txt
  * filename = vertical100.txt
==&gt; passed

Test 3b: random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments
==&gt; passed

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
  * filename = random91.txt
  * filename = random152.txt
==&gt; passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==&gt; passed

Test 5a: points from a file with 5 or more on some line segments
  * filename = input9.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (6000, 6000) -&gt; (9000, 9000)
    - reference segment 0: (1000, 1000) -&gt; (2000, 2000) -&gt; (3000, 3000) -&gt; (4000, 4000) -&gt; (5000, 5000) -&gt; (6000, 6000) -&gt; (7000, 7000) -&gt; (8000, 8000) -&gt; (9000, 9000)

    - number of entries in student   solution: 21
    - number of entries in reference solution: 1
    - 20 extra entries in student solution, including: '(6000, 6000) -&gt; (9000, 9000)'

  * filename = input10.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (2000, 22000) -&gt; (4000, 30000)
    - reference segment 1: (1000, 18000) -&gt; (2000, 22000) -&gt; (3000, 26000) -&gt; (3500, 28000) -&gt; (4000, 30000)

    - number of entries in student   solution: 4
    - number of entries in reference solution: 2
    - 2 extra entries in student solution, including: '(2000, 22000) -&gt; (4000, 30000)'

  * filename = input20.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (4096, 20992) -&gt; (7168, 20992)
    - reference segment 0: (4096, 20992) -&gt; (5120, 20992) -&gt; (6144, 20992) -&gt; (7168, 20992) -&gt; (8128, 20992)

    - number of entries in student   solution: 13
    - number of entries in reference solution: 5
    - 8 extra entries in student solution, including: '(5120, 29184) -&gt; (8192, 29184)'

  * filename = input50.txt
    - segments() contains the same segment more than once
    - segment 3: (1000, 2000) -&gt; (1000, 26000)
    - segment 4: (1000, 2000) -&gt; (1000, 26000)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (18000, 23000) -&gt; (18000, 30000)
    - reference segment 6: (18000, 13000) -&gt; (18000, 23000) -&gt; (18000, 26000) -&gt; (18000, 27000) -&gt; (18000, 30000)

    - number of entries in student   solution: 11
    - number of entries in reference solution: 7
    - 4 extra entries in student solution, including: '(18000, 23000) -&gt; (18000, 30000)'

  * filename = input80.txt
    - segments() contains the same segment more than once
    - segment 0: (0, 23000) -&gt; (30000, 23000)
    - segment 1: (0, 23000) -&gt; (30000, 23000)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 2: (16000, 6000) -&gt; (1000, 21000)
    - reference segment 2: (17000, 5000) -&gt; (16000, 6000) -&gt; (12000, 10000) -&gt; (9000, 13000) -&gt; (1000, 21000)

    - number of entries in student   solution: 53
    - number of entries in reference solution: 31
    - 22 extra entries in student solution, including: '(0, 23000) -&gt; (30000, 23000)'

  * filename = input300.txt
    - segments() contains the same segment more than once
    - segment 1: (7300, 10050) -&gt; (7300, 31650)
    - segment 2: (7300, 10050) -&gt; (7300, 31650)

    - number of entries in student   solution: 8
    - number of entries in reference solution: 6
    - 2 extra entries in student solution, including: '(7300, 10050) -&gt; (7300, 31650)'

  * filename = inarow.txt
    - segments() contains the same segment more than once
    - segment 3: (0, 0) -&gt; (30000, 0)
    - segment 8: (0, 0) -&gt; (30000, 0)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (5000, 0) -&gt; (20000, 0)
    - reference segment 1: (0, 0) -&gt; (5000, 0) -&gt; (10000, 0) -&gt; (15000, 0) -&gt; (20000, 0) -&gt; (25000, 0) -&gt; (30000, 0)

    - number of entries in student   solution: 35
    - number of entries in reference solution: 5
    - 30 extra entries in student solution, including: '(0, 15000) -&gt; (0, 30000)'

==&gt; FAILED

Test 5b: points from a file with 5 or more on some line segments
  * filename = kw1260.txt
    - segments() contains the same segment more than once
    - segment 0: (16454, 121) -&gt; (16666, 1529)
    - segment 1: (16454, 121) -&gt; (16666, 1529)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 2: (16507, 473) -&gt; (16666, 1529)
    - reference segment 253: (16454, 121) -&gt; (16507, 473) -&gt; (16560, 825) -&gt; (16613, 1177) -&gt; (16666, 1529)

    - number of entries in student   solution: 1553
    - number of entries in reference solution: 288
    - 1265 extra entries in student solution, including: '(13180, 30413) -&gt; (14764, 30467)'

  * filename = rs1423.txt
==&gt; FAILED

Test 6: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==&gt; passed

Test 7: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = input299.txt
==&gt; passed

Test 8: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==&gt; passed

Test 9: random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 25 random line segments
  * 50 random line segments
  * 100 random line segments
==&gt; passed

Test 10: random line segments
  *  1 random line segment
  *  5 random line segments
  * 25 random line segments
  * 50 random line segments
  * 100 random line segments
==&gt; passed

Test 11: random distinct points in a given range
  * 5 random points in a 10-by-10 grid
    - segments() contains the same segment more than once
    - segment 0: (4, 1) -&gt; (4, 9)
    - segment 2: (4, 1) -&gt; (4, 9)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (4, 2) -&gt; (4, 9)
    - reference segment 0: (4, 1) -&gt; (4, 2) -&gt; (4, 4) -&gt; (4, 7) -&gt; (4, 9)

    - number of entries in student   solution: 3
    - number of entries in reference solution: 1
    - 2 extra entries in student solution, including: '(4, 2) -&gt; (4, 9)'

    - failed on trial 58 of 500
     5
         4     7
         4     1
         4     9
         4     4
         4     2

  * 10 random points in a 10-by-10 grid
    - segments() contains the same segment more than once
    - segment 1: (0, 5) -&gt; (6, 5)
    - segment 2: (0, 5) -&gt; (6, 5)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (0, 5) -&gt; (4, 5)
    - reference segment 0: (0, 5) -&gt; (1, 5) -&gt; (3, 5) -&gt; (4, 5) -&gt; (6, 5)

    - number of entries in student   solution: 3
    - number of entries in reference solution: 1
    - 2 extra entries in student solution, including: '(0, 5) -&gt; (6, 5)'

    - failed on trial 91 of 500
     10
         4     6
         2     9
         3     0
         3     5
         8     2
         4     5
         0     5
         7     8
         1     5
         6     5

  * 50 random points in a 10-by-10 grid
    - segments() contains the same segment more than once
    - segment 4: (1, 7) -&gt; (7, 7)
    - segment 5: (1, 7) -&gt; (7, 7)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 2: (0, 7) -&gt; (8, 7)
    - reference segment 14: (0, 7) -&gt; (1, 7) -&gt; (2, 7) -&gt; (4, 7) -&gt; (6, 7) -&gt; (7, 7) -&gt; (8, 7) -&gt; (9, 7)

    - number of entries in student   solution: 126
    - number of entries in reference solution: 35
    - 91 extra entries in student solution, including: '(2, 7) -&gt; (9, 7)'

    - failed on trial 1 of 100

  * 90 random points in a 10-by-10 grid
    - segments() contains the same segment more than once
    - segment 8: (1, 0) -&gt; (9, 0)
    - segment 9: (1, 0) -&gt; (9, 0)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 2: (7, 0) -&gt; (4, 6)
    - reference segment 12: (7, 0) -&gt; (6, 2) -&gt; (5, 4) -&gt; (4, 6) -&gt; (3, 8)

    - number of entries in student   solution: 782
    - number of entries in reference solution: 128
    - 654 extra entries in student solution, including: '(1, 9) -&gt; (8, 9)'

    - failed on trial 1 of 50

  * 200 random points in a 50-by-50 grid
    - segments() contains the same segment more than once
    - segment 11: (44, 4) -&gt; (20, 40)
    - segment 12: (44, 4) -&gt; (20, 40)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (31, 4) -&gt; (22, 22)
    - reference segment 20: (31, 4) -&gt; (30, 6) -&gt; (25, 16) -&gt; (22, 22) -&gt; (11, 44)

    - number of entries in student   solution: 679
    - number of entries in reference solution: 250
    - 429 extra entries in student solution, including: '(15, 48) -&gt; (42, 48)'

    - failed on trial 1 of 10

==&gt; FAILED

Test 12: m*n points on an m-by-n grid
  * 3-by-3 grid
  * 4-by-4 grid
  * 5-by-5 grid
    - segments() contains the same segment more than once
    - segment 0: (0, 4) -&gt; (4, 4)
    - segment 1: (0, 4) -&gt; (4, 4)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 3: (2, 1) -&gt; (2, 4)
    - reference segment 13: (2, 0) -&gt; (2, 1) -&gt; (2, 2) -&gt; (2, 3) -&gt; (2, 4)

    - number of entries in student   solution: 40
    - number of entries in reference solution: 16
    - 24 extra entries in student solution, including: '(0, 4) -&gt; (4, 4)'

  * 10-by-10 grid
    - segments() contains the same segment more than once
    - segment 3: (9, 3) -&gt; (3, 9)
    - segment 4: (9, 3) -&gt; (3, 9)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (8, 2) -&gt; (5, 8)
    - reference segment 19: (9, 0) -&gt; (8, 2) -&gt; (7, 4) -&gt; (6, 6) -&gt; (5, 8)

    - number of entries in student   solution: 1044
    - number of entries in reference solution: 154
    - 890 extra entries in student solution, including: '(4, 9) -&gt; (8, 9)'

  * 20-by-20 grid
    - segments() contains the same segment more than once
    - segment 10: (9, 3) -&gt; (3, 15)
    - segment 11: (9, 3) -&gt; (3, 15)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 2: (6, 5) -&gt; (3, 17)
    - reference segment 136: (7, 1) -&gt; (6, 5) -&gt; (5, 9) -&gt; (4, 13) -&gt; (3, 17)

    - number of entries in student   solution: 18442
    - number of entries in reference solution: 2446
    - 15996 extra entries in student solution, including: '(11, 19) -&gt; (19, 19)'

  * 5-by-4 grid
    - segments() contains the same segment more than once
    - segment 12: (0, 0) -&gt; (4, 0)
    - segment 16: (0, 0) -&gt; (4, 0)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (1, 3) -&gt; (4, 3)
    - reference segment 5: (0, 3) -&gt; (1, 3) -&gt; (2, 3) -&gt; (3, 3) -&gt; (4, 3)

    - number of entries in student   solution: 21
    - number of entries in reference solution: 13
    - 8 extra entries in student solution, including: '(1, 3) -&gt; (4, 3)'

  * 6-by-4 grid
    - segments() contains the same segment more than once
    - segment 2: (1, 2) -&gt; (5, 2)
    - segment 3: (1, 2) -&gt; (5, 2)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (0, 2) -&gt; (3, 2)
    - reference segment 5: (0, 2) -&gt; (1, 2) -&gt; (2, 2) -&gt; (3, 2) -&gt; (4, 2) -&gt; (5, 2)

    - number of entries in student   solution: 36
    - number of entries in reference solution: 16
    - 20 extra entries in student solution, including: '(2, 3) -&gt; (5, 3)'

  * 10-by-4 grid
    - segments() contains the same segment more than once
    - segment 2: (0, 1) -&gt; (8, 1)
    - segment 3: (0, 1) -&gt; (8, 1)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (1, 1) -&gt; (9, 1)
    - reference segment 13: (0, 1) -&gt; (1, 1) -&gt; (2, 1) -&gt; (3, 1) -&gt; (4, 1) -&gt; (5, 1) -&gt; (6, 1) -&gt; (7, 1) -&gt; (8, 1) -&gt; (9, 1)

    - number of entries in student   solution: 146
    - number of entries in reference solution: 38
    - 108 extra entries in student solution, including: '(5, 3) -&gt; (9, 3)'

  * 15-by-4 grid
    - segments() contains the same segment more than once
    - segment 2: (2, 1) -&gt; (9, 1)
    - segment 3: (2, 1) -&gt; (9, 1)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (2, 1) -&gt; (11, 1)
    - reference segment 31: (0, 1) -&gt; (1, 1) -&gt; (2, 1) -&gt; (3, 1) -&gt; (4, 1) -&gt; (5, 1) -&gt; (6, 1) -&gt; (7, 1) -&gt; (8, 1) -&gt; (9, 1) -&gt; (10, 1) -&gt; (11, 1) -&gt; (12, 1) -&gt; (13, 1) -&gt; (14, 1)

    - number of entries in student   solution: 387
    - number of entries in reference solution: 79
    - 308 extra entries in student solution, including: '(9, 3) -&gt; (13, 3)'

  * 25-by-4 grid
    - segments() contains the same segment more than once
    - segment 5: (4, 3) -&gt; (18, 3)
    - segment 6: (4, 3) -&gt; (18, 3)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 3: (5, 3) -&gt; (19, 3)
    - reference segment 95: (0, 3) -&gt; (1, 3) -&gt; (2, 3) -&gt; (3, 3) -&gt; (4, 3) -&gt; (5, 3) -&gt; (6, 3) -&gt; (7, 3) -&gt; (8, 3) -&gt; (9, 3) -&gt; (10, 3) -&gt; (11, 3) -&gt; (12, 3) -&gt; (13, 3) -&gt; (14, 3) -&gt; (15, 3) -&gt; (16, 3) -&gt; (17, 3) -&gt; (18, 3) -&gt; (19, 3) -&gt; (20, 3) -&gt; (21, 3) -&gt; (22, 3) -&gt; (23, 3) -&gt; (24, 3)

    - number of entries in student   solution: 1221
    - number of entries in reference solution: 213
    - 1008 extra entries in student solution, including: '(10, 3) -&gt; (24, 3)'

==&gt; FAILED

Test 13: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==&gt; passed

Test 14: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==&gt; passed

Test 15: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==&gt; passed

Test 16: throws an exception if either constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==&gt; passed

Test 17: check that the constructor throws an exception if duplicate points
  * 50 points
    - failed on trial 1 of 5
    - constructor fails to throw a java.lang.IllegalArgumentException when passed duplicate points


  * 25 points
    - failed on trial 1 of 10
    - constructor fails to throw a java.lang.IllegalArgumentException when passed duplicate points


  * 5 points
    - failed on trial 1 of 100
    - constructor fails to throw a java.lang.IllegalArgumentException when passed duplicate points

     5
      3499 24639
      3499 24639
      2781 26401
     29868 32444
     17749  2942

  * 4 points
    - failed on trial 1 of 100
    - constructor fails to throw a java.lang.IllegalArgumentException when passed duplicate points

     4
       859  7347
     19838 24666
     11421 32692
       859  7347

  * 3 points
    - failed on trial 1 of 100
    - constructor fails to throw a java.lang.IllegalArgumentException when passed duplicate points

     3
      9624  1678
     18007 18554
     18007 18554

  * 2 points
    - failed on trial 1 of 100
    - constructor fails to throw a java.lang.IllegalArgumentException when passed duplicate points

     2
     16164 18702
     16164 18702

==&gt; FAILED


Total: 16/21 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 24 bytes (passed)

Total: 1/1 tests passed!

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing BruteCollinearPoints
*-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    16   0.00        2500           0           2500                 6700         
=&gt; passed    32   0.01       41416           0          41416               118296         
=&gt; passed    64   0.03      679056           0         679056              1991472         
=&gt; passed   128   0.09    11017504           0       11017504             32694880         
=&gt; passed   256   1.38   177588800           0      177588800            529937600         
==&gt; 5/5 tests passed

Test 2a-2e: Find collinear points among n/4 arbitrary line segments


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    16   0.00        2500           0           2500                 6717         
=&gt; passed    32   0.01       41416           0          41416               118342         
=&gt; passed    64   0.07      679056           0         679056              1991556         
=&gt; passed   128   0.11    11017504           0       11017504             32695056         
=&gt; passed   256   1.56   177588800           0      177588800            529937946         
==&gt; 5/5 tests passed

Total: 10/10 tests passed!


================================================================



Timing FastCollinearPoints
*-----------------------------------------------------------
Running 31 total tests.

Test 1a-1g: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.01        2016        8151          18318                    0         
=&gt; passed   128   0.01        8128       40805          89738                    0         
=&gt; passed   256   0.03       32640      196241         425122                    0         
=&gt; passed   512   0.06      130816      917387        1965590                    0         
=&gt; passed  1024   0.20      523776     4197413        8918602                    0         
=&gt; passed  2048   0.75     2096128    18890811       39877750                    0         
==&gt; 6/6 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (39877750 / 8918602) = 2.16
=&gt; passed

==&gt; 7/7 tests passed

Test 2a-2g: Find collinear points among the n points on an n-by-1 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.01        2016        1953           5922                10299         
=&gt; passed   128   0.01        8128        8001          24130                42074         
=&gt; passed   256   0.04       32640       32385          97410               171550         
=&gt; passed   512   0.07      130816      130305         391426               693620         
=&gt; passed  1024   0.20      523776      522753        1569282              2783470         
=&gt; passed  2048   0.43     2096128     2094081        6284290             11159709         
=&gt; passed  4096   1.53     8386560     8382465       25151490             44727890         
==&gt; 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (25151490 / 6284290) = 2.00
=&gt; passed

==&gt; 8/8 tests passed

Test 3a-3g: Find collinear points among the n points on an n/4-by-4 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.00        2016        8099          18214                 2420         
=&gt; passed   128   0.00        8128       40451          89030                11092         
=&gt; passed   256   0.01       32640      192494         417628                47913         
=&gt; passed   512   0.05      130816      881496        1893808               197159         
=&gt; passed  1024   0.16      523776     3960624        8445024               803685         
=&gt; passed  2048   0.51     2096128    17515281       37126690              3216786         
=&gt; passed  4096   2.12     8386560    76666436      161719432             13005628         
==&gt; 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (161719432 / 37126690) = 2.12
=&gt; passed

==&gt; 8/8 tests passed

Test 4a-4g: Find collinear points among the n points on an n/8-by-8 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.00        2016        8115          18246                 2060         
=&gt; passed   128   0.00        8128       40824          89776                 9498         
=&gt; passed   256   0.01       32640      195903         424446                40588         
=&gt; passed   512   0.03      130816      911048        1952912               169212         
=&gt; passed  1024   0.12      523776     4133386        8790548               693755         
=&gt; passed  2048   0.50     2096128    18443875       38983878              2798151         
=&gt; passed  4096   2.17     8386560    81335061      171056682             11234870         
==&gt; 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (171056682 / 38983878) = 2.13
=&gt; passed

==&gt; 8/8 tests passed

Total: 31/31 tests passed!


================================================================





