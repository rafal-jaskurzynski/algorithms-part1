See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (6 warnings)
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 37 warnings)

Correctness:  44/49 tests passed
Memory:       22/22 tests passed
Timing:       49/125 tests passed

Aggregate score: 81.72%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
5.0K Jan 11 09:51 Board.java
3.4K Jan 11 09:51 Solver.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Board.java
*-----------------------------------------------------------

% javac Solver.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
H B EQ_CHECK_FOR_OPERAND_NOT_COMPATIBLE_WITH_THIS Eq: The 'equals()' method checks whether its operand is of type 'String', which is neither a supertype or subtype of the class that the defines the 'equals()' method.   At Board.java:[line 118]
M C SPP_STATIC_FORMAT_STRING SPP: Method Board.toString() calls String.format on a static (non parameterized) format string  At Board.java:[line 206]
M C SPP_STATIC_FORMAT_STRING SPP: Method Board.print(int[]) calls String.format on a static (non parameterized) format string  At Board.java:[line 214]
M P SBSC_USE_STRINGBUFFER_CONCATENATION SBSC: Builds a 'String' object using the '+' operator in a loop, which can take time quadratic in the length of the resulting string. Instead, use 'StringBuilder'.  At Board.java:[line 217]
M D RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT RV: Calls the method 'solution()' but ignores its return value. The method, however, does not produce any effect other than returning a value.  At Solver.java:[line 146]
M P SS_SHOULD_BE_STATIC SS: The instance variable 'EMPTY_ELEMENT' is final and initialized to a compile-time constant. Should it also be static?  At Board.java:[line 9]
Warnings generated: 6


================================================================


% pmd .
*-----------------------------------------------------------
Board.java:9: This instance variable should be turned into a class constant by adding the 'static' modifier. [FinalFieldCouldBeStatic]
Solver.java:10: The private instance (or static) variable '_solution' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PMD ends with 2 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Board.java:9:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] Board.java:9:23: The instance variable 'EMPTY_ELEMENT' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Board.java:10:23: The instance variable '_n' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Board.java:11:25: The instance variable '_block' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Board.java:12:17: The instance variable '_manhatan' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Board.java:25:19: The method 'two_to_one' must start with a lowercase letter and use camelCase. [MethodName]
[WARN] Board.java:25:38: The parameter variable 'to_copy' must start with a lowercase letter and use camelCase. [ParameterName]
[WARN] Board.java:36:21: The method 'one_to_two' must start with a lowercase letter and use camelCase. [MethodName]
[WARN] Board.java:36:38: The parameter variable 'to_copy' must start with a lowercase letter and use camelCase. [ParameterName]
[WARN] Board.java:105:26: '(' is followed by whitespace. [ParenPad]
[WARN] Board.java:105:33: ')' is preceded with whitespace. [ParenPad]
[WARN] Board.java:107:13: The local variable 'idx_2' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] Board.java:107:38: ')' is preceded with whitespace. [ParenPad]
[WARN] Board.java:108:13: The local variable 'idx_1' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] Board.java:108:38: ')' is preceded with whitespace. [ParenPad]
[WARN] Board.java:113:26: '(' is followed by whitespace. [ParenPad]
[WARN] Board.java:118:28: Do not use the 'instanceof' operator in this course. Use 'getClass()' to compare classes. [IllegalToken]
[WARN] Board.java:135:25: '(' is followed by whitespace. [ParenPad]
[WARN] Board.java:135:45: ')' is preceded with whitespace. [ParenPad]
[WARN] Board.java:137:12: 'for' is not followed by whitespace. [WhitespaceAfter]
[WARN] Board.java:137:13: '(' is followed by whitespace. [ParenPad]
[WARN] Board.java:139:17: '(' is followed by whitespace. [ParenPad]
[WARN] Board.java:149:26: The instance variable '_neighbors' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Board.java:196:30: The parameter variable 'to_copy' must start with a lowercase letter and use camelCase. [ParameterName]
[WARN] Board.java:209:32: The parameter variable '_arg' must start with a lowercase letter and use camelCase. [ParameterName]
[WARN] Solver.java:10:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] Solver.java:10:30: The instance variable '_solution' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Solver.java:13:15: The instance variable '_board' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Solver.java:14:9: Declare static and instance variables in order of their access modifiers: public, protected, package, and private. [DeclarationOrder]
[WARN] Solver.java:14:20: The instance variable '_moves' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Solver.java:15:20: The instance variable '_parent' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Solver.java:18:62: The parameter variable 'search_node' must start with a lowercase letter and use camelCase. [ParameterName]
Checkstyle ends with 0 errors and 32 warnings.

% custom checkstyle checks for Board.java
*-----------------------------------------------------------
[WARN] Board.java:7:1: Defining a nested class in this program suggests poor design. [DescendantToken]
[WARN] Board.java:147:39: Using interface inheritance suggests poor design in this program. For example, 'Board' should be neither 'Comparable' nor 'Iterable'. [Design]
[WARN] Board.java:155:40: Do not create your own 'Iterable' or 'Iterator' classes. To return an 'Iterable&lt;Board&gt;', simply create a 'Stack&lt;Board&gt;' or 'Queue&lt;Board&gt;', add the boards to the stack/queue, and return the stack/queue. [Design]
Checkstyle ends with 0 errors and 3 warnings.

% custom checkstyle checks for Solver.java
*-----------------------------------------------------------
[WARN] Solver.java:74:42: The numeric literal '100' appears to be unnecessary. [NumericLiteral]
[WARN] Solver.java:75:51: Do not print to standard output in 'Solver()'. [SideEffect]
Checkstyle ends with 0 errors and 2 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Board
*-----------------------------------------------------------
Running 24 total tests.

Tests 5, 6, 13, and 14 rely upon toString() returning results in prescribed format.

Test 1a: check hamming() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==&gt; passed

Test 1b: check hamming() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==&gt; passed

Test 2a: check manhattan() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==&gt; passed

Test 2b: check manhattan() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==&gt; passed

Test 3: check dimension() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
==&gt; passed

Test 4a: check toString() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==&gt; passed

Test 4b: check toString() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==&gt; passed

Test 5a: check neighbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==&gt; passed

Test 5b: check neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==&gt; passed

Test 6a: check neighbors() of neigbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==&gt; passed

Test 6b: check neighbors() of neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==&gt; passed

Test 7a: check twin() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==&gt; passed

Test 7b: check twin() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==&gt; passed

Test 8a: check isGoal() with file inputs
  * puzzle00.txt
  * puzzle04.txt
  * puzzle16.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-00.txt
  * puzzle4x4-00.txt
==&gt; passed

Test 8b: check isGoal() on n-by-n goal boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
  * 100-by-100
==&gt; passed

Test 9: check that two Board objects can be created at the same time
  * random 3-by-3 and 3-by-3 boards
  * random 4-by-4 and 4-by-4 boards
  * random 2-by-2 and 2-by-2 boards
  * random 3-by-3 and 4-by-4 boards
  * random 4-by-4 and 3-by-3 boards
==&gt; passed

Test 10a: check equals()
  * reflexive
  * symmetric
  * transitive
  * argument is null
  * argument is of type String
  * Board object stored in a variable of type Object
==&gt; passed

Test 10b: check correctness of equals() on random n-by-n boards
  * n = 2
  * n = 3
  * n = 4
  * 5 &lt;= n &lt; 10
==&gt; passed

Test 10c: check equals() when board sizes m and n are different
  * m = 4, n = 5
  * m = 2, n = 5
  * m = 5, n = 3
  * m = 2, n = 3
  * m = 3, n = 2
==&gt; passed

Test 11: check that Board is immutable by changing argument array after
         construction and making sure Board does not mutate
==&gt; passed

Test 12: check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle10.txt
  * puzzle20.txt
  * puzzle30.txt
  * 2-by-2
  * 3-by-3
  * 4-by-4
==&gt; passed

Test 13: check dimension() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==&gt; passed

Test 14: check hamming() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==&gt; passed

Test 15: check manhattan() on a board that is a kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==&gt; passed


Total: 24/24 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Board
*-----------------------------------------------------------
Running 10 total tests.

Memory usage of an n-by-n board
[ must be at most 4n^2 + 32n + 64 bytes ]


              n       student (bytes)    reference (bytes)
----------------------------------------------------------
=&gt; passed     2            80                  128
=&gt; passed     3           104                  192
=&gt; passed     4           128                  240
=&gt; passed     8           320                  560
=&gt; passed    12           640                 1008
=&gt; passed    16          1088                 1584
=&gt; passed    20          1664                 2288
=&gt; passed    37          5544                 6856
=&gt; passed    72         20800                23088
=&gt; passed   120         57664                61488
==&gt; 10/10 tests passed

Total: 10/10 tests passed!

Student   memory = 4.00 n^2 + 0.00 n + 64.00   (R^2 = 1.000)
Reference memory = 4.00 n^2 + 32.00 n + 48.00   (R^2 = 1.000)

================================================================



********************************************************************************
*  TESTING CORRECTNESS (substituting reference Board)
********************************************************************************

Testing correctness of Solver
*-----------------------------------------------------------
Running 25 total tests.

Test 1a: check moves() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
  * puzzle12.txt
  * puzzle13.txt
==&gt; passed

Test 1b: check solution() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
  * puzzle12.txt
  * puzzle13.txt
==&gt; passed

Test 2a: check moves() with more file inputs
  * puzzle14.txt
  * puzzle15.txt
  * puzzle16.txt
  * puzzle17.txt
  * puzzle18.txt
    - moves() returns wrong value
    - student   moves() = 20
    - reference moves() = 18
    - board =
        3
         5  6  2 
         1  8  4 
         7  3  0 

  * puzzle19.txt
    - moves() returns wrong value
    - student   moves() = 21
    - reference moves() = 19
    - board =
        3
         1  2  7 
         0  4  3 
         6  5  8 

  * puzzle20.txt
  * puzzle21.txt
  * puzzle22.txt
    - moves() returns wrong value
    - student   moves() = 24
    - reference moves() = 22
    - board =
        3
         4  8  2 
         3  6  5 
         1  7  0 

  * puzzle23.txt
  * puzzle24.txt
  * puzzle25.txt
  * puzzle26.txt
    - moves() returns wrong value
    - student   moves() = 28
    - reference moves() = 26
    - board =
        3
         5  7  0 
         3  2  8 
         1  6  4 

  * puzzle27.txt
  * puzzle28.txt
  * puzzle29.txt
    - moves() returns wrong value
    - student   moves() = 31
    - reference moves() = 29
    - board =
        3
         6  0  5 
         8  7  4 
         3  2  1 

  * puzzle30.txt
  * puzzle31.txt
==&gt; FAILED

Test 2b: check solution() with more file inputs
  * puzzle14.txt
  * puzzle15.txt
  * puzzle16.txt
  * puzzle17.txt
  * puzzle18.txt
  * puzzle19.txt
  * puzzle20.txt
  * puzzle21.txt
  * puzzle22.txt
  * puzzle23.txt
  * puzzle24.txt
  * puzzle25.txt
  * puzzle26.txt
  * puzzle27.txt
  * puzzle28.txt
  * puzzle29.txt
  * puzzle30.txt
  * puzzle31.txt
==&gt; passed

Test 3a: check moves() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal
  * 1000 random 3-by-3 boards that are exactly 9 moves from goal
    - moves() returns wrong value
    - student   moves() = 11
    - reference moves() = 9
    - board =
        3
         1  5  2 
         8  3  0 
         4  7  6 

    - failed on trial 65 of 1000

==&gt; FAILED

Test 3b: check solution() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal
  * 1000 random 3-by-3 boards that are exactly 9 moves from goal
  * 1000 random 3-by-3 boards that are exactly 10 moves from goal
  * 1000 random 3-by-3 boards that are exactly 11 moves from goal
  * 1000 random 3-by-3 boards that are exactly 12 moves from goal
==&gt; passed

Test 4: create two Solver objects at the same time
  * puzzle04.txt and puzzle04.txt
  * puzzle00.txt and puzzle04.txt
  * puzzle04.txt and puzzle00.txt
==&gt; passed

Test 5a: call isSolvable() with file inputs
  * puzzle01.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle17.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==&gt; passed

Test 5b: call isSolvable() on random n-by-n boards
  * 100 random 2-by-2 boards
==&gt; passed

Test 6: check moves() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
  * puzzle2x2-unsolvable2.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==&gt; passed

Test 7: check solution() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
  * puzzle2x2-unsolvable2.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==&gt; passed

Test 8a: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-05.txt
  * puzzle3x3-10.txt
  * random 2-by-2 solvable boards
==&gt; passed

Test 8b: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
  * random 2-by-2 unsolvable boards
==&gt; passed

Test 9a: check that equals() method in Board is called
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
==&gt; passed

Test 9b: check that equals() method in Board is called only
         with an argument of type Board
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
==&gt; passed

Test 9c: check that equals() method in Board is called only
         with a neighbor of a neighbor as an argument
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
  * puzzle27.txt
==&gt; passed

Test 10: check that constructor throws exception if board is null
==&gt; passed

Test 11a: check moves() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==&gt; passed

Test 11b: check solution() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==&gt; passed

Test 12a: check moves() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
    - moves() returns wrong value
    - student   moves() = 15
    - reference moves() = 13
    - board =
        3
         4  3  1 
         0  7  2 
         8  5  6 

  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt
  * puzzle3x3-21.txt
  * puzzle3x3-22.txt
  * puzzle3x3-23.txt
  * puzzle3x3-24.txt
  * puzzle3x3-25.txt
  * puzzle3x3-26.txt
  * puzzle3x3-27.txt
  * puzzle3x3-28.txt
  * puzzle3x3-29.txt
  * puzzle3x3-30.txt
    - moves() returns wrong value
    - student   moves() = 32
    - reference moves() = 30
    - board =
        3
         8  6  7 
         2  0  4 
         3  5  1 

==&gt; FAILED

Test 12b: check solution() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt
  * puzzle3x3-21.txt
  * puzzle3x3-22.txt
  * puzzle3x3-23.txt
  * puzzle3x3-24.txt
  * puzzle3x3-25.txt
  * puzzle3x3-26.txt
  * puzzle3x3-27.txt
  * puzzle3x3-28.txt
  * puzzle3x3-29.txt
  * puzzle3x3-30.txt
==&gt; passed

Test 13a: check moves() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
    - moves() returns wrong value
    - student   moves() = 19
    - reference moves() = 15
    - board =
        4
         5  1  3  4 
        13  2  7  8 
         6 10 11 12 
        14  9  0 15 

  * puzzle4x4-16.txt
    - moves() returns wrong value
    - student   moves() = 20
    - reference moves() = 16
    - board =
        4
         5  1  2  4 
         6  0 10  7 
        13 11  3  8 
        14  9 15 12 

  * puzzle4x4-17.txt
  * puzzle4x4-18.txt
  * puzzle4x4-19.txt
  * puzzle4x4-20.txt
  * puzzle4x4-21.txt
  * puzzle4x4-22.txt
  * puzzle4x4-23.txt
  * puzzle4x4-24.txt
    - moves() returns wrong value
    - student   moves() = 28
    - reference moves() = 24
    - board =
        4
         9  5  1  2 
         6  4  8  3 
        10 14  7 11 
        13  0 15 12 

  * puzzle4x4-25.txt
  * puzzle4x4-26.txt
  * puzzle4x4-27.txt
  * puzzle4x4-28.txt
    - moves() returns wrong value
    - student   moves() = 32
    - reference moves() = 28
    - board =
        4
         2  5  4  7 
         9  1  3  8 
        11 10  0  6 
        14 13 15 12 

  * puzzle4x4-29.txt
    - moves() returns wrong value
    - student   moves() = 33
    - reference moves() = 29
    - board =
        4
         1  8  3  0 
         5  7  4 12 
        14  6  2 15 
         9 13 10 11 

  * puzzle4x4-30.txt
    - moves() returns wrong value
    - student   moves() = 34
    - reference moves() = 30
    - board =
        4
         2  4  8 12 
         1  7  3 14 
         0  6 15 11 
         5  9 13 10 

==&gt; FAILED

Test 13b: check solution() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt
  * puzzle4x4-17.txt
  * puzzle4x4-18.txt
  * puzzle4x4-19.txt
  * puzzle4x4-20.txt
  * puzzle4x4-21.txt
  * puzzle4x4-22.txt
  * puzzle4x4-23.txt
  * puzzle4x4-24.txt
  * puzzle4x4-25.txt
  * puzzle4x4-26.txt
  * puzzle4x4-27.txt
  * puzzle4x4-28.txt
  * puzzle4x4-29.txt
  * puzzle4x4-30.txt
==&gt; passed

Test 14a: check moves() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are &lt;= 6 moves from goal
  * 200 random 3-by-3 boards that are &lt;= 20 moves from goal
    - moves() returns wrong value
    - student   moves() = 12
    - reference moves() = 10
    - board =
        3
         4  1  2 
         5  0  6 
         7  3  8 

    - failed on trial 9 of 200

  * 200 random 4-by-4 boards that are &lt;= 20 moves from goal
    - moves() returns wrong value
    - student   moves() = 26
    - reference moves() = 20
    - board =
        4
         1  2  6  3 
         5  7  8  4 
        13  9 11 12 
        10 14 15  0 

    - failed on trial 24 of 200

  * 200 random 5-by-5 boards that are &lt;= 20 moves from goal
    - moves() returns wrong value
    - student   moves() = 19
    - reference moves() = 17
    - board =
        5
         1  8  3 10  4 
         6  2  0  9  5 
        11 12  7 13 15 
        16 17 18 14 19 
        21 22 23 24 20 

    - failed on trial 7 of 200

==&gt; FAILED

Test 14b: check solution() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are &lt;= 6 moves from goal
  * 200 random 3-by-3 boards that are &lt;= 20 moves from goal
  * 200 random 4-by-4 boards that are &lt;= 20 moves from goal
  * 200 random 5-by-5 boards that are &lt;= 20 moves from goal
==&gt; passed


Total: 20/25 tests passed!


================================================================
********************************************************************************
*  MEMORY (substituting reference Board)
********************************************************************************

Analyzing memory of Solver
*-----------------------------------------------------------
Running 12 total tests.

Maximum allowed time per puzzle is 5.0 seconds.
Maximum allowed memory per puzzle = 200000000 bytes.

Test 1: Measure memory of Solver.

               filename   moves   memory
---------------------------------------------
=&gt; passed  puzzle10.txt      10     4432         
=&gt; passed  puzzle15.txt      15     5256         
=&gt; passed  puzzle20.txt      20     2280         
=&gt; passed  puzzle25.txt      25     2848         
=&gt; passed  puzzle30.txt      30     3328         
=&gt; passed  puzzle35.txt      35     4800         
==&gt; 6/6 tests passed



Test 2: Measure memory of MinPQ.

                              deep              max           ending
               filename     memory             size             size
--------------------------------------------------------------------
=&gt; passed  puzzle10.txt      12600               18               17         
=&gt; passed  puzzle15.txt      15680               27               26         
=&gt; passed  puzzle20.txt     198864              555              554         
=&gt; passed  puzzle25.txt    1559064             4238             4237         
=&gt; passed  puzzle30.txt    3228328             8662             8661         
=&gt; passed  puzzle35.txt   15183312            44742            44741         
==&gt; 6/6 tests passed


Total: 12/12 tests passed!

================================================================



********************************************************************************
*  TIMING (substituting reference Board)
********************************************************************************

Timing Solver
*-----------------------------------------------------------
Running 125 total tests.

Maximum allowed time per puzzle is 5.0 seconds.

Test 1: Measure CPU time and check correctness

               filename   moves    n  seconds
---------------------------------------------
=&gt; passed  puzzle20.txt      20    3     0.02 
=&gt; FAILED  puzzle22.txt      24*   3     0.05 
=&gt; passed  puzzle21.txt      21    3     0.00 
=&gt; passed  puzzle23.txt      23    3     0.03 
=&gt; passed  puzzle24.txt      24    3     0.01 
=&gt; passed  puzzle25.txt      25    3     0.05 
=&gt; passed  puzzle27.txt      27    3     0.01 
=&gt; FAILED  puzzle29.txt      31*   3     0.21 
=&gt; FAILED  puzzle26.txt      28*   3     0.03 
=&gt; passed  puzzle28.txt      28    3     0.01 
=&gt; passed  puzzle30.txt      30    3     0.09 
=&gt; passed  puzzle31.txt      31    3     0.28 
=&gt; passed  puzzle39.txt      39    4     2.05 
=&gt; FAILED  puzzle41.txt      43*   5     0.10 
=&gt; FAILED  puzzle34.txt      36*   4     0.61 
=&gt; FAILED  puzzle37.txt      39*   4     0.76 
=&gt; FAILED  puzzle44.txt      46*   5     1.24 
=&gt; FAILED  puzzle32.txt      36*   4    14.19 (&gt;= 5.0 seconds)

Exceeded CPU limit of 5.0 seconds per puzzle. Aborting tests.

==&gt; 10/25 tests passed



Test 2: Count MinPQ operations

               filename   insert()         delMin()
---------------------------------------------------
=&gt; passed  puzzle20.txt       1321              767         
=&gt; passed  puzzle22.txt       4847             2836         
=&gt; passed  puzzle21.txt       1782             1037         
=&gt; passed  puzzle23.txt       5977             3534         
=&gt; passed  puzzle24.txt       2604             1582         
=&gt; passed  puzzle25.txt      10368             6131         
=&gt; passed  puzzle27.txt       2061             1240         
=&gt; FAILED  puzzle29.txt      36112   (1.8x)   21479   (1.7x)
=&gt; passed  puzzle26.txt       5753             3412         
=&gt; passed  puzzle28.txt       4986             3015         
=&gt; passed  puzzle30.txt      21505            12844         
=&gt; passed  puzzle31.txt      63885            38394         
=&gt; FAILED  puzzle39.txt     349947   (2.8x)  166500   (2.7x)
=&gt; passed  puzzle41.txt      16591             7031         
=&gt; passed  puzzle34.txt     130424            61902         
=&gt; passed  puzzle37.txt     198366            93587         
=&gt; passed  puzzle44.txt     262595           113816         
=&gt; FAILED  puzzle32.txt    2829521   (3.1x) 1333049   (3.1x)
==&gt; 15/25 tests passed



Test 3: Count Board operations (that should not get called)

               filename    hamming()   toString()     tileAt()
--------------------------------------------------------------
=&gt; passed  puzzle20.txt          26458            0            0         
=&gt; FAILED  puzzle22.txt          117460   (1.1x)   0            0         
=&gt; passed  puzzle21.txt          36582            0            0         
=&gt; passed  puzzle23.txt          154046            0            0         
=&gt; passed  puzzle24.txt          58746            0            0         
=&gt; passed  puzzle25.txt          280502            0            0         
=&gt; passed  puzzle27.txt          46184            0            0         
=&gt; FAILED  puzzle29.txt          1167172   (2.9x)   0            0         
=&gt; passed  puzzle26.txt          148404            0            0         
=&gt; passed  puzzle28.txt          129020            0            0         
=&gt; passed  puzzle30.txt          650448            0            0         
=&gt; FAILED  puzzle31.txt          2231310   (1.3x)   0            0         
=&gt; FAILED  puzzle39.txt          12616114   (5.1x)   0            0         
=&gt; passed  puzzle41.txt          403958            0            0         
=&gt; passed  puzzle34.txt          4171744            0            0         
=&gt; FAILED  puzzle37.txt          6770950   (1.1x)   0            0         
=&gt; passed  puzzle44.txt          8551016            0            0         
=&gt; FAILED  puzzle32.txt          119233510   (5.2x)   0            0         
==&gt; 12/25 tests passed



Test 4a: Count Board operations (that should get called)

               filename    Board()            equals()         manhattan()
--------------------------------------------------------------------------
=&gt; passed  puzzle20.txt       2087                2085               27226         
=&gt; FAILED  puzzle22.txt       7682                7680              120297   (1.2x)
=&gt; passed  puzzle21.txt       2818                2816               37620         
=&gt; passed  puzzle23.txt       9510                9508              157581         
=&gt; passed  puzzle24.txt       4185                4183               60329         
=&gt; passed  puzzle25.txt      16498               16496              286634         
=&gt; passed  puzzle27.txt       3300                3298               47425         
=&gt; FAILED  puzzle29.txt      57590   (1.8x)      57588   (1.8x)    1188652   (3.0x)
=&gt; passed  puzzle26.txt       9164                9162              151817         
=&gt; passed  puzzle28.txt       8000                7998              132036         
=&gt; passed  puzzle30.txt      34348               34346              663293         
=&gt; FAILED  puzzle31.txt     102278              102276             2269705   (1.3x)
=&gt; FAILED  puzzle39.txt     516446   (2.8x)     516444   (2.8x)   12782615   (5.2x)
=&gt; passed  puzzle41.txt      23621               23619              410990         
=&gt; passed  puzzle34.txt     192325              192323             4233647         
=&gt; FAILED  puzzle37.txt     291952              291950             6864538   (1.1x)
=&gt; passed  puzzle44.txt     376410              376408             8664833         
=&gt; FAILED  puzzle32.txt    4162569   (3.1x)    4162567   (3.1x)  120566560   (5.2x)
==&gt; 12/25 tests passed



Test 4b: count Board operations (that should get called),
         rejecting if doesn't adhere to stricter caching limits

               filename    Board()            equals()         manhattan()
--------------------------------------------------------------------------
=&gt; FAILED  puzzle20.txt       2087                2085               27226   (6.8x)
=&gt; FAILED  puzzle22.txt       7682                7680              120297  (12.4x)
=&gt; FAILED  puzzle21.txt       2818                2816               37620   (3.8x)
=&gt; FAILED  puzzle23.txt       9510                9508              157581  (10.7x)
=&gt; FAILED  puzzle24.txt       4185                4183               60329   (4.0x)
=&gt; FAILED  puzzle25.txt      16498               16496              286634  (10.0x)
=&gt; FAILED  puzzle27.txt       3300                3298               47425   (1.5x)
=&gt; FAILED  puzzle29.txt      57590   (1.8x)      57588   (1.8x)    1188652  (36.3x)
=&gt; FAILED  puzzle26.txt       9164                9162              151817   (4.6x)
=&gt; FAILED  puzzle28.txt       8000                7998              132036   (1.7x)
=&gt; FAILED  puzzle30.txt      34348               34346              663293   (5.5x)
=&gt; FAILED  puzzle31.txt     102278              102276             2269705  (17.6x)
=&gt; FAILED  puzzle39.txt     516446   (2.8x)     516444   (2.8x)   12782615  (68.6x)
=&gt; FAILED  puzzle41.txt      23621               23619              410990   (1.4x)
=&gt; FAILED  puzzle34.txt     192325              192323             4233647  (10.8x)
=&gt; FAILED  puzzle37.txt     291952              291950             6864538  (15.9x)
=&gt; FAILED  puzzle44.txt     376410              376408             8664833  (12.4x)
=&gt; FAILED  puzzle32.txt    4162569   (3.1x)    4162567   (3.1x)  120566560  (89.3x)
==&gt; 0/25 tests passed


Total: 49/125 tests passed!


================================================================





